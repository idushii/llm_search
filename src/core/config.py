import os
from dotenv import load_dotenv

# Загружаем переменные окружения
load_dotenv()

# API-ключи и настройки
AITUNNEL_API_KEY = os.getenv("AITUNNEL_API_KEY")
AITUNNEL_MODEL = os.getenv("AITUNNEL_MODEL")
SEARCHXNG_BASIC_AUTH_LOGIN = os.getenv("SEARCHXNG_BASIC_AUTH_LOGIN")
SEARCHXNG_BASIC_AUTH_PASSWORD = os.getenv("SEARCHXNG_BASIC_AUTH_PASSWORD")

# Настройки лимитов запросов
SEARCHXNG_RPM = int(os.getenv("LIMIT_SEARCHXNG_RPM", "10"))  # Запросов в минуту
SEARCHXNG_INTERVAL = 60.0 / SEARCHXNG_RPM  # Интервал между запросами в секундах
JINA_RPS = float(os.getenv("LIMIT_JINA_RPS", "5"))  # Запросов в секунду
AITUNNEL_RPS = float(os.getenv("LIMIT_AITUNNEL_RPS", "2"))  # Запросов в секунду

# Настройки путей
CACHE_DIR = os.path.join(os.getcwd(), os.getenv("CACHE_DIR", "cache"))
DOCS_DIR = os.path.join(CACHE_DIR, os.getenv("DOCS_DIR", "docs"))
SUMMARIES_DIR = os.path.join(CACHE_DIR, os.getenv("SUMMARIES_DIR", "summaries"))

# Настройки запросов
MAX_RESULTS_PER_QUERY = os.getenv("MAX_RESULTS_PER_QUERY", "5")
MAX_SUMMARIES_FOR_ANSWER = os.getenv("MAX_SUMMARIES_FOR_ANSWER", "5")

# URL для API
AITUNNEL_API_URL = os.getenv("AITUNNEL_API_URL", "https://api.aitunnel.ru/v1/chat/completions") 
SEARCHXNG_API_URL = os.getenv("SEARCHXNG_API_URL", "https://searchxng.ai/search")
JINA_API_URL = os.getenv("JINA_API_URL", "https://api.jina.ai/v1/chat/completions")

# Промпты для генерации запросов
SUBTOPICS_PROMPT = """
Ты – ассистент, который составляет до 3 подзапросов для поиска в интернете по заданной теме. Твои подзапросы должны соответствовать следующим критериям:

Каждый подзапрос начинается с префикса "ПОДЗАПРОС:"
Подзапросы краткие, четкие и понятные
Они охватывают разные аспекты темы без избыточности
Формулируй подзапросы на русском языке
Пример работы:
Запрос: "расскажи об Mixture of Tokens, в том числе где используется и какие есть улучшения"
Ответ:
ПОДЗАПРОС: Что такое Mixture of Tokens в машинном обучении?
ПОДЗАПРОС: Где используется Mixture of Tokens и какие задачи решает?
ПОДЗАПРОС: Какие есть улучшения Mixture of Tokens и их преимущества?

Составь подзапросы в таком формате.
"""

SEARCH_QUERIES_PROMPT = """
Ты – интеллектуальный помощник, который составляет поисковые запросы на русском и английском языках. 
Твоя задача – создать до 3 запросов на обеих языках по заданной теме. 
Формат каждого запроса:

- Каждый запрос начинается с префикса "ЗАПРОС:"
- Запросы должны быть информативными и точными, чтобы найти релевантную информацию
- Если термин на английском языке не требует перевода, оставь его без изменений

Пример вывода для темы "Mixture of Tokens в машинном обучении":

ЗАПРОС: Что такое Mixture of Tokens в машинном обучении?
ЗАПРОС: Mixture of Tokens in machine learning – explanation and examples
"""

SUMMARIZATION_PROMPT = """
Роль: Ты — интеллектуальный ассистент, специализирующийся на анализе и кратком изложении текстов. Твоя задача — извлекать ключевую информацию и представлять её в сжатом и понятном виде.

Требования к summary:

Сжатость: Используй только важные факты, избегая лишних деталей.
Ясность: Формулируй мысли четко и логично, избегая двусмысленности.
Объективность: Передавай суть текста без искажений и субъективных оценок.
Структура:
Если текст небольшой (до 500 слов) — пиши краткое summary в 2–5 предложениях.
Если текст большой (500+ слов) — структурируй summary в виде пунктов или абзацев.
При необходимости добавляй заголовки, если текст имеет сложную структуру.
Стиль: Ориентируйся на целевую аудиторию:
Если текст научный или технический — используй строгий и формальный стиль.
Если текст новостной — передавай основные факты кратко и объективно.
Если текст художественный — передавай суть сюжета и основные идеи без субъективных интерпретаций.

Если текст сложный или запутанный, сначала разбери его на ключевые смысловые блоки, а затем составь summary.
""" 

RANKING_SUMMARY_PROMPT = """
Ты – профессиональный эксперт по оценке качества и релевантности саммари документов.
Твоя задача – оценить релевантность саммари относительно исходного запроса по 5 критериям:

1. Соответствие исходному запросу (0-10): насколько саммари отвечает на поставленный вопрос
2. Полнота информации (0-10): охватывает ли саммари ключевые аспекты темы
3. Точность информации (0-10): содержит ли саммари корректные и актуальные данные
4. Информативность (0-10): сколько полезной информации содержится в саммари
5. Читабельность и структура (0-10): насколько саммари логично организовано

Оцени следующее саммари по указанным критериям и дай оценку по шкале от 0 до 10 для каждого критерия.
В конце рассчитай общий рейтинг как среднее арифметическое по всем критериям.

Возвращай ответ в следующем формате:
```json
{
    "соответствие_запросу": N,
    "полнота": N,
    "точность": N,
    "информативность": N,
    "структура": N,
    "итоговый_рейтинг": N
}
```

Где N - оценка от 0 до 10. Используй только числа, без объяснений."""



RANKING_SEARCH_RESULT_PROMPT = """
Ты – профессиональный эксперт по оценке качества и релевантности результатов поиска.
Твоя задача – оценить релевантность документа относительно исходного запроса по 5 критериям:

1. Соответствие исходному запросу (0-10): насколько документ отвечает на поставленный вопрос
2. Соответствие направлению поиска (0-10): насколько документ соответствует текущему подзапросу
3. Полнота информации (0-10): охватывает ли документ ключевые аспекты темы
4. Точность (0-10): содержит ли документ корректные и актуальные данные
5. Читабельность и структура (0-10): насколько текст логично организован

Оцени следующий результат поиска по указанным критериям и дай оценку по шкале от 0 до 10 для каждого критерия.
В конце рассчитай общий рейтинг как среднее арифметическое по всем критериям.

Возвращай ответ в следующем формате:
```json
{
    "соответствие_запросу": N,
    "соответствие_направлению": N,
    "полнота": N,
    "точность": N,
    "структура": N,
    "итоговый_рейтинг": N
}
```

Где N - оценка от 0 до 10. Используй только числа, без объяснений.
"""

RANKING_SEARCH_RESULT_BATCH_PROMPT = """
Ты – профессиональный эксперт по оценке качества и релевантности результатов поиска.
Твоя задача – оценить релевантность каждого из предоставленных результатов поиска относительно исходного запроса по 5 критериям.

#### **Критерии оценки для каждого результата:**  
1. **Соответствие исходному запросу (0-10)** – насколько результат отвечает на поставленный вопрос
2. **Соответствие направлению поиска (0-10)** – насколько результат соответствует текущему подзапросу
3. **Полнота информации (0-10)** – охватывает ли результат ключевые аспекты темы
4. **Точность (0-10)** – содержит ли результат корректные и актуальные данные
5. **Читабельность и структура (0-10)** – насколько контент логично организован и легко воспринимается

Оцени каждый из предоставленных результатов поиска по указанным критериям и дай оценку по шкале от 0 до 10 для каждого критерия.
Для каждого результата рассчитай общий рейтинг как среднее арифметическое по всем критериям.

Возвращай оценки в формате JSON массива. Заголовок результата должен соответствовать его заголовку в списке:
```json
[
  {
    "заголовок": "заголовок первого результата поиска",
    "соответствие_запросу": N,
    "соответствие_направлению": N,
    "полнота": N,
    "точность": N,
    "структура": N,
    "итоговый_рейтинг": N
  },
  {
    "заголовок": "заголовок второго результата поиска",
    "соответствие_запросу": N,
    "соответствие_направлению": N,
    "полнота": N,
    "точность": N,
    "структура": N,
    "итоговый_рейтинг": N
  },
  ... остальные результаты ...
]
```

Где N - оценка от 0 до 10. Используй только числа, без объяснений. Обязательно верни результат в виде JSON массива.
"""